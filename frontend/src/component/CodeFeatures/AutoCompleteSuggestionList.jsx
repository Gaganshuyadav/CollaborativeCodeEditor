

export const javascriptSuggestionList = [
      { label: "let", type: "primitive" },
      { label: "const", type: "primitive" },
      { label: "var", type: "primitive" },
      { label: "if", type: "keyword" },
      { label: "else", type: "keyword" },
      { label: "document", type: "variable" },
        { label: "console", type: "variable" },
        { label: "log", type: "function" },
        { label: "error", type: "function" },
        { label: "warn", type: "function" },
        { label: "info", type: "function" },
        { label: "table", type: "function" },
        { label: "assert", type: "function" },
        { label: "clear", type: "function" },
        { label: "time", type: "function" },
        { label: "timeEnd", type: "function" },
        { label: "alert", type: "function" },
        { label: "prompt", type: "function" },
        { label: "confirm", type: "function" },
        { label: "document", type: "variable" },
        { label: "window", type: "variable" },
        { label: "setTimeout", type: "function" },
        { label: "setInterval", type: "function" },
        { label: "clearTimeout", type: "function" },
        { label: "clearInterval", type: "function" },
        { label: "fetch", type: "function" },
        { label: "Promise", type: "variable" },
        { label: "async", type: "keyword" },
        { label: "await", type: "keyword" },
        { label: "Math", type: "variable" },
        { label: "Array", type: "variable" },
        { label: "Object", type: "variable" },
        { label: "String", type: "variable" },
        { label: "Number", type: "variable" },
        { label: "Boolean", type: "variable" },
        { label: "JSON", type: "variable" },
        { label: "localStorage", type: "variable" },
        { label: "sessionStorage", type: "variable" },
        { label: "navigator", type: "variable" },
        { label: "event", type: "variable" },
        { label: "addEventListener", type: "function" },
        { label: "removeEventListener", type: "function" },
        { label: "querySelector", type: "function" },
        { label: "querySelectorAll", type: "function" },
        { label: "getElementById", type: "function" },
        { label: "getElementsByClassName", type: "function" },
        { label: "getElementsByTagName", type: "function" },
        { label: "createElement", type: "function" },
        { label: "appendChild", type: "function" },
        { label: "removeChild", type: "function" },
        { label: "innerHTML", type: "property" },
        { label: "outerHTML", type: "property" },
        { label: "textContent", type: "property" },
        { label: "style", type: "property" },
        { label: "classList", type: "property" },
        { label: "length", type: "property" },
        { label: "push", type: "function" },
        { label: "pop", type: "function" },
        { label: "shift", type: "function" },
        { label: "unshift", type: "function" },
        { label: "slice", type: "function" },
        { label: "splice", type: "function" },
        { label: "forEach", type: "function" },
        { label: "map", type: "function" },
        { label: "filter", type: "function" },
        { label: "reduce", type: "function" },
        { label: "reduceRight", type: "function" },
        { label: "find", type: "function" },
        { label: "findIndex", type: "function" },
        { label: "includes", type: "function" },
        { label: "indexOf", type: "function" },
        { label: "join", type: "function" },
        { label: "toString", type: "function" },
        { label: "toFixed", type: "function" },
        { label: "parseInt", type: "function" },
        { label: "parseFloat", type: "function" },
        { label: "sort", type: "function" },
        { label: "reverse", type: "function" },
        { label: "fill", type: "function" },
        { label: "copyWithin", type: "function" },
        { label: "flat", type: "function" },
        { label: "flatMap", type: "function" },
        { label: "keys", type: "function" },
        { label: "values", type: "function" },
        { label: "entries", type: "function" },
        { label: "from", type: "function" },
        { label: "of", type: "function" },
        { label: "slice", type: "function" },
        { label: "every", type: "function" },
        { label: "some", type: "function" },
        { label: "toLocaleString", type: "function" },
        { label: "toLocaleDateString", type: "function" },
        { label: "toLocaleTimeString", type: "function" },
        { label: "set", type: "function" },
        { label: "get", type: "function" },
        { label: "has", type: "function" },
        { label: "delete", type: "function" },
        { label: "clear", type: "function" },
        { label: "size", type: "property" },
        { label: "Symbol", type: "variable" },
        { label: "Reflect", type: "variable" },
        { label: "Proxy", type: "variable" },
        { label: "WeakMap", type: "variable" },
        { label: "WeakSet", type: "variable" },
        { label: "Map", type: "variable" },
        { label: "Set", type: "variable" },
        { label: "ArrayBuffer", type: "variable" },
        { label: "TypedArray", type: "variable" },
        { label: "DataView", type: "variable" },
        { label: "Promise.all", type: "function" },
        { label: "Promise.race", type: "function" },
        { label: "Promise.resolve", type: "function" },
        { label: "Promise.reject", type: "function" },
        { label: "Math.abs", type: "function" },
        { label: "Math.ceil", type: "function" },
        { label: "Math.floor", type: "function" },
        { label: "Math.round", type: "function" },
        { label: "Math.max", type: "function" },
        { label: "Math.min", type: "function" },
        { label: "Math.random", type: "function" },
        { label: "Math.sqrt", type: "function" },
        { label: "Math.pow", type: "function" },
        { label: "Math.sin", type: "function" },
        { label: "Math.cos", type: "function" },
        { label: "Math.tan", type: "function" },
        { label: "Math.log", type: "function" },
        { label: "Math.exp", type: "function" },
        { label: "Math.PI", type: "constant" },
        { label: "Math.E", type: "constant" },
        { label: "Math.LN2", type: "constant" },
        { label: "Math.LN10", type: "constant" },
        { label: "Math.LOG2E", type: "constant" },
        { label: "Math.LOG10E", type: "constant" },
        { label: "Math.SQRT1_2", type: "constant" },
        { label: "Math.SQRT2", type: "constant" },
        { label: "String.fromCharCode", type: "function" },
        { label: "String.fromCodePoint", type: "function" },
        { label: "String.prototype.includes", type: "function" },
        { label: "String.prototype.indexOf", type: "function" },
        { label: "String.prototype.lastIndexOf", type: "function" },
        { label: "String.prototype.slice", type: "function" },
        { label: "String.prototype.split", type: "function" },
        { label: "String.prototype.trim", type: "function" },
        { label: "String.prototype.toLowerCase", type: "function" },
        { label: "String.prototype.toUpperCase", type: "function" },
        { label: "String.prototype.replace", type: "function" },
        { label: "String.prototype.match", type: "function"},
    ]
export const pythonSuggestionList = [
        { label: "print", type: "function" },
        { label: "input", type: "function" },
        { label: "len", type: "function" },
        { label: "type", type: "function" },
        { label: "str", type: "function" },
        { label: "int", type: "function" },
        { label: "float", type: "function" },
        { label: "list", type: "function" },
        { label: "dict", type: "function" },
        { label: "set", type: "function" },
        { label: "tuple", type: "function" },
        { label: "range", type: "function" },
        { label: "sum", type: "function" },
        { label: "min", type: "function" },
        { label: "max", type: "function" },
        { label: "sorted", type: "function" },
        { label: "reversed", type: "function" },
        { label: "map", type: "function" },
        { label: "filter", type: "function" },
        { label: "zip", type: "function" },
        { label: "enumerate", type: "function" },
        { label: "any", type: "function" },
        { label: "all", type: "function" },
        { label: "abs", type: "function" },
        { label: "round", type: "function" },
        { label: "open", type: "function" },
        { label: "close", type: "method" },
        { label: "read", type: "method" },
        { label: "write", type: "method" },
        { label: "append", type: "method" },
        { label: "strip", type: "method" },
        { label: "split", type: "method" },
        { label: "join", type: "method" },
        { label: "replace", type: "method" },
        { label: "find", type: "method" },
        { label: "count", type: "method" },
        { label: "keys", type: "method" },
        { label: "values", type: "method" },
        { label: "items", type: "method" },
        { label: "get", type: "method" },
        { label: "setdefault", type: "method" },
        { label: "update", type: "method" },
        { label: "pop", type: "method" },
        { label: "popitem", type: "method" },
        { label: "add", type: "method" },
        { label: "remove", type: "method" },
        { label: "discard", type: "method" },
        { label: "union", type: "method" },
        { label: "intersection", type: "method" },
        { label: "difference", type: "method" },
        { label: "symmetric_difference", type: "method" },
        { label: "copy", type: "method" },
        { label: "clear", type: "method" },
        { label: "sort", type: "method" },
        { label: "reverse", type: "method" },
        { label: "append", type: "method" },
        { label: "extend", type: "method" },
        { label: "insert", type: "method" },
        { label: "remove", type: "method" },
        { label: "pop", type: "method" },
        { label: "index", type: "method" },
        { label: "count", type: "method" },
        { label: "copy", type: "method" },
        { label: "clear", type: "method" },
        { label: "slice", type: "method" },
        { label: "format", type: "method" },
        { label: "f-string", type: "syntax" },
        { label: "if", type: "keyword" },
        { label: "elif", type: "keyword" },
        { label: "else", type: "keyword" },
        { label: "for", type: "keyword" },
        { label: "while", type: "keyword" },
        { label: "break", type: "keyword" },
        { label: "continue", type: "keyword" },
        { label: "def", type: "keyword" },
     { label: "return", type: "keyword" },
        { label: "class", type: "keyword" },
        { label: "import", type: "keyword" },
        { label: "from", type: "keyword" },
        { label: "as", type: "keyword" },
        { label: "try", type: "keyword" },
        { label: "except", type: "keyword" },
        { label: "finally", type: "keyword" },
        { label: "with", type: "keyword" },
        { label: "lambda", type: "keyword" },
        { label: "self", type: "variable" },
        { label: "super", type: "function" },
        { label: "staticmethod", type: "decorator" },
        { label: "classmethod", type: "decorator" },
        { label: "property", type: "decorator" },
        { label: "assert", type: "keyword" },
        { label: "raise", type: "keyword" },
        { label: "yield", type: "keyword" },
        { label: "async", type: "keyword" },
        { label: "await", type: "keyword" },
        { label: "math", type: "module" },
        { label: "random", type: "module" },
        { label: "datetime", type: "module" },
        { label: "os", type: "module" },
        { label: "sys", type: "module" },
        { label: "json", type: "module" },
        { label: "re", type: "module" },
        { label: "requests", type: "module" },
        { label: "pandas", type: "module" },
        { label: "numpy", type: "module" },
        { label: "matplotlib", type: "module" },
        { label: "scikit-learn", type: "module" },
        { label: "tensorflow", type: "module" },
        { label: "keras", type: "module" },
        { label: "flask", type: "module" },
        { label: "django", type: "module" },
        { label: "sqlite3", type: "module" },
        { label: "csv", type: "module" },
        { label: "xml", type: "module" },
        { label: "html", type: "module" },
        { label: "urllib", type: "module" },
        { label: "collections", type: "module" },
        { label: "itertools", type: "module" },
        { label: "functools", type: "module" },
        { label: "operator", type: "module" },
        { label: "pickle", type: "module" },
        { label: "socket", type: "module" },
        { label: "threading", type: "module" },
        { label: "multiprocessing", type: "module" },
        { label: "subprocess", type: "module" },
        { label: "time", type: "module" },
        { label: "datetime.datetime", type: "class" },
        { label: "datetime.date", type: "class" },
        { label: "datetime.time", type: "class" },
        { label: "datetime.timedelta", type: "class" },
        { label: "datetime.tzinfo", type: "class" },
        { label: "math.sqrt", type: "function" },
        { label: "math.pow", type: "function" },
        { label: "math.sin", type: "function" },
        { label: "math.cos", type: "function" },
        { label: "math.tan", type: "function" },
        { label: "math.log", type: "function" },
        { label: "math.exp", type: "function" },
        { label: "math.factorial", type: "function" },
        { label: "math.gcd", type: "function" },
        { label: "math.lcm", type: "function" },
        { label: "math.pi", type: "constant" },
        { label: "math.e", type: "constant" },
        { label: "math.inf", type: "constant" },
        { label: "math.nan", type: "constant" },
        { label: "random.random", type: "function" },
        { label: "random.randint", type: "function" },
        { label: "random.choice", type: "function" },
    ]
export const javaSuggestionList = [
        { label: "System", type: "class" },
        { label: "out", type: "variable" },
        { label: "println", type: "method" },
        { label: "String", type: "class" },
        { label: "int", type: "primitive" },
        { label: "double", type: "primitive" },
        { label: "boolean", type: "primitive" },
        { label: "char", type: "primitive" },
        { label: "byte", type: "primitive" },
        { label: "short", type: "primitive" },
        { label: "long", type: "primitive" },
        { label: "float", type: "primitive" },
        { label: "if", type: "keyword" },
        { label: "else", type: "keyword" },
        { label: "for", type: "keyword" },
        { label: "while", type: "keyword" },
        { label: "do", type: "keyword" },
        { label: "switch", type: "keyword" },
        { label: "case", type: "keyword" },
        { label: "break", type: "keyword" },
        { label: "continue", type: "keyword" },
        { label: "class", type: "keyword" },
        { label: "public", type: "access modifier" },
        { label: "private", type: "access modifier" },
        { label: "protected", type: "access modifier" },
        { label: "static", type: "keyword" },
        { label: "void", type: "keyword" },
        { label: "main", type: "method" },
        { label: "new", type: "keyword" },
        { label: "return", type: "keyword" },
        { label: "try", type: "keyword" },
        { label: "catch", type: "keyword" },
        { label: "finally", type: "keyword" },
        { label: "throw", type: "keyword" },
        { label: "throws", type: "keyword" },
        { label: "import", type: "keyword" },
        { label: "package", type: "keyword" },
        { label: "interface", type: "keyword" },
        { label: "extends", type: "keyword" },
        { label: "implements", type: "keyword" },
        { label: "this", type: "keyword" },
        { label: "super", type: "keyword" },
        { label: "null", type: "literal" },
        { label: "true", type: "literal" },
        { label: "false", type: "literal" },
        { label: "ArrayList", type: "class" },
        { label: "HashMap", type: "class" },
        { label: "List", type: "interface" },
        { label: "Map", type: "interface" },
        { label: "Set", type: "interface" },
        { label: "Iterator", type: "interface" },
        { label: "Collections", type: "class" },
        { label: "Math", type: "class" },
        { label: "Random", type: "class" },
        { label: "File", type: "class" },
        { label: "IOException", type: "class" },
        { label: "Scanner", type: "class" },
        { label: "Thread", type: "class" },
        { label: "Runnable", type: "interface" },
        { label: "synchronized", type: "keyword" },
        { label: "volatile", type: "keyword" },
        { label: "final", type: "keyword" },
        { label: "abstract", type: "keyword" },
        { label: "enum", type: "keyword" },
        { label: "assert", type: "keyword" },
        { label: "instanceof", type: "keyword" },
        { label: "default", type: "keyword" },
        { label: "native", type: "keyword" },
        { label: "strictfp", type: "keyword" },
        { label: "Optional", type: "class" },
        { label: "Stream", type: "class" },
        { label: "Map.Entry", type: "interface" },
        { label: "Comparator", type: "interface" },
        { label: "Function", type: "interface" },
        { label: "Consumer", type: "interface" },
        { label: "Supplier", type: "interface" },
        { label: "Predicate", type: "interface" },
        { label: "CompletableFuture", type: "class" },
        { label: "ExecutorService", type: "interface" },
        { label: "Future", type: "interface" },
        { label: "Callable", type: "interface" },
        { label: "ScheduledExecutorService", type: "interface" },
        { label: "LinkedList", type: "class" },
        { label: "HashSet", type: "class" },
        { label: "TreeSet", type: "class" },
        { label: "TreeMap", type: "class" },
        { label: "PriorityQueue", type: "class" },
        { label: "StringBuilder", type: "class" },
        { label: "StringBuffer", type: "class" },
        { label: "LocalDate", type: "class" },
        { label: "LocalTime", type: "class" },
        { label: "LocalDateTime", type: "class" },
        { label: "ZoneId", type: "class" },
        { label: "DateTimeFormatter", type: "class" },
        { label: "OptionalInt", type: "class" },
        { label: "OptionalDouble", type: "class" },
        { label: "OptionalLong", type: "class" },
        { label: "DoubleStream", type: "class" },
        { label: "IntStream", type: "class" },
        { label: "LongStream", type: "class" },
        { label: "Collectors", type: "class" },
        { label: "StreamSupport", type: "class" },
        { label: "Files", type: "class" },
        { label: "Paths", type: "class" },
        { label: "Files.readAllLines", type: "method" },
        { label: "Files.write", type: "method" },
        { label: "Files.exists", type: "method" },
        { label: "Files.createFile", type: "method" },
        { label: "Files.delete", type: "method" },
        { label: "BufferedReader", type: "class" },
        { label: "BufferedWriter", type: "class" },
        { label: "PrintWriter", type: "class" },
        { label: "InputStream", type: "class" },
        { label: "OutputStream", type: "class" },
        { label: "FileInputStream", type: "class" },
        { label: "FileOutputStream", type: "class" },
        { label: "ObjectInputStream", type: "class" },
        { label: "ObjectOutputStream", type: "class" },
        { label: "StreamReader", type: "class" },
        { label: "StreamWriter", type: "class" },
        { label: "Socket", type: "class" },
        { label: "ServerSocket", type: "class" },
        { label: "URL", type: "class" },
        { label: "URLConnection", type: "class" },
        { label: "HttpURLConnection", type: "class" },
        { label: "JsonObject", type: "class" },
        { label: "JsonArray", type: "class" },
        { label: "JsonParser", type: "class" },
        { label: "JsonElement", type: "class" },
        { label: "JsonSyntaxException", type: "class" },
        { label: "JsonIOException", type: "class" },
        { label: "JsonParseException", type: "class" },
    ]
export const cppSuggestionList = [
        { label: "cout", type: "variable" },
        { label: "cin", type: "variable" },
        { label: "endl", type: "function" },
        { label: "string", type: "type" },
        { label: "int", type: "type" },
        { label: "float", type: "type" },
        { label: "double", type: "type" },
        { label: "char", type: "type" },
        { label: "bool", type: "type" },
        { label: "if", type: "keyword" },
        { label: "else", type: "keyword" },
        { label: "for", type: "keyword" },
        { label: "while", type: "keyword" },
        { label: "do", type: "keyword" },
        { label: "switch", type: "keyword" },
        { label: "case", type: "keyword" },
        { label: "break", type: "keyword" },
        { label: "continue", type: "keyword" },
        { label: "return", type: "keyword" },
        { label: "class", type: "keyword" },
        { label: "public", type: "keyword" },
        { label: "private", type: "keyword" },
        { label: "protected", type: "keyword" },
        { label: "virtual", type: "keyword" },
        { label: "override", type: "keyword" },
        { label: "new", type: "keyword" },
        { label: "delete", type: "keyword" },
        { label: "namespace", type: "keyword" },
        { label: "std", type: "namespace" },
        { label: "vector", type: "type" },
        { label: "map", type: "type" },
        { label: "set", type: "type" },
        { label: "list", type: "type" },
        { label: "pair", type: "type" },
        { label: "function", type: "type" },
        { label: "template", type: "keyword" },
        { label: "typename", type: "keyword" },
        { label: "const", type: "keyword" },
        { label: "static", type: "keyword" },
        { label: "extern", type: "keyword" },
        { label: "friend", type: "keyword" },
        { label: "this", type: "keyword" },
        { label: "sizeof", type: "function" },
        { label: "typeid", type: "function" },
        { label: "dynamic_cast", type: "function" },
        { label: "static_cast", type: "function" },
        { label: "reinterpret_cast", type: "function" },
        { label: "const_cast", type: "function" },
        { label: "try", type: "keyword" },
        { label: "catch", type: "keyword" },
        { label: "throw", type: "keyword" },
        { label: "nullptr", type: "literal" },
        { label: "true", type: "literal" },
        { label: "false", type: "literal" },
        { label: "sizeof", type: "function" },
        { label: "auto", type: "keyword" },
        { label: "decltype", type: "keyword" },
        { label: "using", type: "keyword" },
        { label: "volatile", type: "keyword" },
        { label: "mutable", type: "keyword" },
        { label: "alignas", type: "keyword" },
        { label: "alignof", type: "keyword" },
        { label: "noexcept", type: "keyword" },
        { label: "decltype", type: "keyword" },
        { label: "static_assert", type: "keyword" },
        { label: "assert", type: "function" },
        { label: "main", type: "function" },
    ]
export const cSuggestionList = [
        { label: "int", type: "keyword" },
        { label: "float", type: "keyword" },
        { label: "double", type: "keyword" },
        { label: "char", type: "keyword" },
        { label: "void", type: "keyword" },
        { label: "if", type: "keyword" },
        { label: "else", type: "keyword" },
        { label: "for", type: "keyword" },
        { label: "while", type: "keyword" },
        { label: "do", type: "keyword" },
        { label: "switch", type: "keyword" },
        { label: "case", type: "keyword" },
        { label: "break", type: "keyword" },
        { label: "continue", type: "keyword" },
        { label: "return", type: "keyword" },
        { label: "struct", type: "keyword" },
        { label: "union", type: "keyword" },
        { label: "enum", type: "keyword" },
        { label: "typedef", type: "keyword" },
        { label: "static", type: "keyword" },
        { label: "extern", type: "keyword" },
        { label: "const", type: "keyword" },
        { label: "volatile", type: "keyword" },
        { label: "sizeof", type: "keyword" },
        { label: "goto", type: "keyword" },
        { label: "NULL", type: "constant" },
        { label: "true", type: "constant" },
        { label: "false", type: "constant" },
        { label: "printf", type: "function" },
        { label: "scanf", type: "function" },
        { label: "malloc", type: "function" },
        { label: "free", type: "function" },
        { label: "strcpy", type: "function" },
        { label: "strlen", type: "function" },
        { label: "strcmp", type: "function" },
        { label: "fopen", type: "function" },
        { label: "fclose", type: "function" },
        { label: "fread", type: "function" },
        { label: "fwrite", type: "function" },
        { label: "fprintf", type: "function" },
        { label: "fscanf", type: "function" },
        { label: "exit", type: "function" },
        { label: "system", type: "function" },
        { label: "assert", type: "function" },
        { label: "memcpy", type: "function" },
        { label: "memset", type: "function" },
        { label: "strcat", type: "function" },
        { label: "strchr", type: "function" },
        { label: "strstr", type: "function" },
        { label: "time", type: "function" },
        { label: "rand", type: "function" },
        { label: "srand", type: "function" },
        { label: "exit", type: "function" },
        { label: "main", type: "function" },
        { label: "FILE", type: "type" },
        { label: "size_t", type: "type" },
        { label: "ptrdiff_t", type: "type" },
        { label: "int8_t", type: "type" },
        { label: "int16_t", type: "type" },
        { label: "int32_t", type: "type" },
        { label: "int64_t", type: "type" },
        { label: "uint8_t", type: "type" },
        { label: "uint16_t", type: "type" },
        { label: "uint32_t", type: "type" },
        { label: "uint64_t", type: "type" },
        { label: "bool", type: "type" },
    ]
export const csharpSuggestionList = [
        { label: "Console", type: "class" },
        { label: "WriteLine", type: "method" },
        { label: "Write", type: "method" },
        { label: "ReadLine", type: "method" },
        { label: "int", type: "type" },
        { label: "string", type: "type" },
        { label: "bool", type: "type" },
        { label: "double", type: "type" },
        { label: "var", type: "keyword" },
        { label: "if", type: "keyword" },
        { label: "else", type: "keyword" },
        { label: "for", type: "keyword" },
        { label: "foreach", type: "keyword" },
        { label: "while", type: "keyword" },
        { label: "do", type: "keyword" },
        { label: "switch", type: "keyword" },
        { label: "case", type: "keyword" },
        { label: "default", type: "keyword" },
        { label: "break", type: "keyword" },
        { label: "continue", type: "keyword" },
        { label: "return", type: "keyword" },
        { label: "class", type: "keyword" },
        { label: "namespace", type: "keyword" },
        { label: "using", type: "keyword" },
        { label: "public", type: "access modifier" },
        { label: "private", type: "access modifier" },
        { label: "protected", type: "access modifier" },
        { label: "internal", type: "access modifier" },
        { label: "static", type: "keyword" },
        { label: "void", type: "type" },
        { label: "new", type: "keyword" },
        { label: "this", type: "keyword" },
        { label: "base", type: "keyword" },
        { label: "override", type: "keyword" },
        { label: "virtual", type: "keyword" },
        { label: "abstract", type: "keyword" },
        { label: "interface", type: "keyword" },
        { label: "enum", type: "keyword" },
        { label: "struct", type: "keyword" },
        { label: "try", type: "keyword" },
        { label: "catch", type: "keyword" },
        { label: "finally", type: "keyword" },
        { label: "throw", type: "keyword" },
        { label: "async", type: "keyword" },
        { label: "await", type: "keyword" },
        { label: "Task", type: "class" },
        { label: "List", type: "class" },
        { label: "Dictionary", type: "class" },
        { label: "IEnumerable", type: "interface" },
        { label: "LINQ", type: "keyword" },
        { label: "Select", type: "method" },
        { label: "Where", type: "method" },
        { label: "ToList", type: "method" },
        { label: "ToArray", type: "method" },
        { label: "Count", type: "property" },
        { label: "Add", type: "method" },
        { label: "Remove", type: "method" },
        { label: "Contains", type: "method" },
        { label: "GetEnumerator", type: "method" },
        { label: "ToString", type: "method" },
        { label: "Equals", type: "method" },
        { label: "GetHashCode", type: "method" },
        { label: "GetType", type: "method" },
        { label: "DateTime", type: "struct" },
        { label: "TimeSpan", type: "struct" },
        { label: "Math", type: "class" },
        { label: "Random", type: "class" },
        { label: "File", type: "class" },
        { label: "StreamReader", type: "class" },
        { label: "StreamWriter", type: "class" },
        { label: "FileInfo", type: "class" },
        { label: "Directory", type: "class" },
        { label: "Path", type: "class" },
        { label: "Exception", type : "class" },
        { label: "ArgumentException", type: "class" },
        { label: "NullReferenceException", type: "class" },
        { label: "InvalidOperationException", type: "class" },
        { label: "ApplicationException", type: "class" },
        { label: "Thread", type: "class" },
        { label: "Task", type: "class" },
        { label: "ThreadPool", type: "class" },
        { label: "CancellationToken", type: "struct" },
        { label: "CancellationTokenSource", type: "class" },
        { label: "EventHandler", type: "delegate" },
        { label: "Action", type: "delegate" },
        { label: "Func", type: "delegate" },
        { label: "Nullable", type: "struct" },
        { label: "Tuple", type: "class" },
        { label: "ValueTuple", type: "struct" },
        { label: "StringBuilder", type: "class" },
        { label: "Regex", type: "class" },
        { label: "JsonConvert", type: "class" },
        { label: "HttpClient", type: "class" },
        { label: "HttpRequestMessage", type: "class" },
        { label: "HttpResponseMessage", type: "class" },
        { label: "HttpContent", type: "class" },
        { label: "IHttpClientFactory", type: "interface" },
        { label: "ServiceCollection", type: "class" },
        { label: "DependencyInjection", type: "namespace" },
        { label: "EntityFramework", type: "namespace" },
        { label: "DbContext", type: "class" },
        { label: "DbSet", type: "class" },
        { label: "Migration", type: "class" },
        { label: "Configuration", type: "class" },
        { label: "Startup", type: "class" },
        { label: "IConfiguration", type: "interface" },
        { label: "IServiceCollection", type: "interface" },
        { label: "IServiceProvider", type: "interface" },
        { label: "ILogger", type: "interface" },
        { label: "ILoggerFactory", type: "interface" },
        { label: "IHostBuilder", type: "interface" },
        { label: "IHost", type: "interface" },
        { label: "WebApplication", type: "class" },
        { label: "WebApplicationBuilder", type: "class" },
        { label: "Middleware", type: "class" },
        { label: "Controller", type: "class" },
        { label: "ActionResult", type: "class" },
        { label: "ViewResult", type: "class" },
        { label: "JsonResult", type: "class" },
        { label: "RedirectResult", type: "class" },
        { label: "NotFoundResult", type: "class" },
        { label: "BadRequestResult", type: "class" },
        { label: "OkResult", type: "class" },
        { label: "FileResult", type: "class" },
        { label: "ContentResult", type: "class" },
        { label: "IActionResult", type: "interface" },
        { label: "IActionFilter", type: "interface" },
        { label: "IResultFilter", type: "interface" },
        { label: "IExceptionFilter", type: "interface" },
        { label: "IAsyncActionFilter", type: "interface" },
        { label: "IAsyncResultFilter", type: "interface" },
        { label: "IAsyncExceptionFilter", type: "interface" },
        { label: "ModelState", type: "class" },
        { label: "ModelStateDictionary", type: "class" },
        { label: "ValidationResult", type: "class" },
        { label: "ValidationContext", type: "class" },
        { label: "DataAnnotations", type: "namespace" },
        { label: "HttpContext", type: "class" },
        { label: "HttpRequest", type: "class" },
        { label: "HttpResponse", type: "class" },
        { label: "Session", type: "class" },
        { label: "Cookie", type: "class" },
        { label: "Claim", type: "class" },
        { label: "ClaimsIdentity", type: "class" },
    ]